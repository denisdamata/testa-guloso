# Makefile
CXX := g++
CXXFLAGS := -std=c++17 -Wall
INCLUDE := -I include

SRC_DIR := src
OBJ_DIR := obj
BIN_DIR := bin

SRC := $(wildcard $(SRC_DIR)/*.cpp)
OBJ := $(patsubst $(SRC_DIR)/%.cpp, $(OBJ_DIR)/%.o, $(SRC))
TARGET := $(BIN_DIR)/tp2

# Configurando a regra padrão
all: $(TARGET)
	@echo "=== Executando ajuda: ==="
	./$(TARGET) -h
	@echo "=== Executando exemplos: ==="
#	./$(TARGET) <exemplo1_input.txt>
#	./$(TARGET) <exemplo2_input.txt>
	@echo "=== Fim dos exemplos ==="

$(TARGET): $(OBJ)
	@mkdir -p $(BIN_DIR)
	@echo "=== Linkando objetos para criar o executável $@ ==="
	$(CXX) $(CXXFLAGS) $(INCLUDE) $^ -o $@
	@echo "=== Compilação concluída com sucesso. Executável $@ ==="

$(OBJ_DIR)/%.o: $(SRC_DIR)/%.cpp
	@mkdir -p $(OBJ_DIR)
	@echo "=== Compilando $< ==="
	$(CXX) $(CXXFLAGS) $(INCLUDE) -c $< -o $@

.PHONY: clean

clean:
	@echo "=== Realizando limpeza... ==="
	@rm -rf $(OBJ_DIR) $(BIN_DIR)
	@echo "=== Limpeza concluída ==="
// include/Grafo.hpp

#ifndef GRAFO_HPP
#define GRAFO_HPP

#include <vector>

class Grafo {
public:
    Grafo(int numVertices);
    void adicionarAresta(int u, int v);
    const std::vector<int>& obterVizinhos(int vertice) const;

private:
    int numVertices;
    std::vector<std::vector<int>> listaAdjacencia;
};

#endif // GRAFO_HPP
#ifndef GULOSO_HPP
#define GULOSO_HPP

#include "Grafo.hpp"  // Certifique-se de incluir o arquivo correto para o seu grafo

class Guloso {
public:
    static bool testeGulosidade(const Grafo& grafo, const std::vector<int>& permutacao, const std::vector<int>& cores);
};

#endif // GULOSO_HPP
// include/Ordenacao.hpp

#ifndef ORDENACAO_HPP
#define ORDENACAO_HPP

#include <vector>

class Ordenacao {
public:
    static void bubbleSort(std::vector<int>& permutacao);
    static void selectionSort(std::vector<int>& permutacao);
    static void insertionSort(std::vector<int>& permutacao);
    static void quicksort(std::vector<int>& permutacao);
    static void mergesort(std::vector<int>& permutacao);
    static void heapsort(std::vector<int>& permutacao);
    static void spiralSort(std::vector<int>& permutacao);
};

#endif

// src/Grafo.cpp

#include "Grafo.hpp"

Grafo::Grafo(int numVertices) : numVertices(numVertices), listaAdjacencia(numVertices) {}

void Grafo::adicionarAresta(int u, int v) {
    listaAdjacencia[u].push_back(v);
    listaAdjacencia[v].push_back(u);
}

const std::vector<int>& Grafo::obterVizinhos(int vertice) const {
    return listaAdjacencia[vertice];
}
#include "Guloso.hpp"

bool Guloso::testeGulosidade(const Grafo& grafo, const std::vector<int>& permutacao, const std::vector<int>& cores) {
    for (int vertice : permutacao) {
        int corAtual = cores[vertice];

        // Verifica se algum vizinho tem a mesma cor
        for (int vizinho : grafo.obterVizinhos(vertice)) {
            if (cores[vizinho] == corAtual) {
                return false; // Coloração não é gulosa
            }
        }

        // Verifica se existe pelo menos um vizinho para cada cor menor
        for (int corMenor = 0; corMenor < corAtual; ++corMenor) {
            bool temVizinhoCorMenor = false;
            for (int vizinho : grafo.obterVizinhos(vertice)) {
                if (cores[vizinho] == corMenor) {
                    temVizinhoCorMenor = true;
                    break;
                }
            }

            if (!temVizinhoCorMenor) {
                return false; // Coloração não é gulosa
            }
        }
    }

    return true; // Coloração é gulosa
}
// src/main.cpp

#include "Grafo.hpp"
#include "Ordenacao.hpp"
#include "Guloso.hpp"  // Adicione esta linha
#include <iostream>
#include <vector>

int main(int argc, char *argv[]) {
    // Leitura dos dados
    char metodoOrdenacao;
    int numVertices;
    std::cin >> metodoOrdenacao >> numVertices;

    // Criar instância do Grafo
    Grafo grafo(numVertices);

    // Ler a vizinhança de cada vértice
    for (int i = 0; i < numVertices; ++i) {
        int numVizinhos;
        std::cin >> numVizinhos;

        for (int j = 0; j < numVizinhos; ++j) {
            int vizinho;
            std::cin >> vizinho;
            grafo.adicionarAresta(i, vizinho);
        }
    }

    // Ler as cores dos vértices
    std::vector<int> cores(numVertices);
    for (int i = 0; i < numVertices; ++i) {
        std::cin >> cores[i];
    }

    // Inicializar vetor de permutação
    std::vector<int> permutacao(numVertices);
    for (int i = 0; i < numVertices; ++i) {
        permutacao[i] = i;
    }

    // Escolher e chamar o método de ordenação
    switch (metodoOrdenacao) {
        case 'b':
            Ordenacao::bubbleSort(permutacao);
            break;
        case 's':
            Ordenacao::selectionSort(permutacao);
            break;
        case 'i':
            Ordenacao::insertionSort(permutacao);
            break;
        case 'q':
            Ordenacao::quicksort(permutacao);
            break;
        case 'm':
            Ordenacao::mergesort(permutacao);
            break;
        case 'p':
            Ordenacao::heapsort(permutacao);
            break;
        // Adicione outros casos de ordenação, se necessário
        default:
            std::cerr << "Método de ordenação inválido" << std::endl;
            return 1;
    }

    // Verificar se a coloração é gulosa
    bool resultado = Guloso::testeGulosidade(grafo, permutacao, cores);  // Chamada da função testeGulosidade

    // Imprimir o resultado
    if (resultado) {
        std::cout << "1";
        for (int i : permutacao) {
            std::cout << " " << i;
        }
        std::cout << std::endl;
    } else {
        std::cout << "0" << std::endl;
    }

    return 0;
}
// src/Ordenacao.cpp

#include "Ordenacao.hpp"
#include <algorithm>

void Ordenacao::bubbleSort(std::vector<int>& permutacao) {
    int n = permutacao.size();
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (permutacao[j] > permutacao[j + 1]) {
                std::swap(permutacao[j], permutacao[j + 1]);
            }
        }
    }
}

void Ordenacao::selectionSort(std::vector<int>& permutacao) {
    int n = permutacao.size();
    for (int i = 0; i < n - 1; ++i) {
        int minIndex = i;
        for (int j = i + 1; j < n; ++j) {
            if (permutacao[j] < permutacao[minIndex]) {
                minIndex = j;
            }
        }
        std::swap(permutacao[i], permutacao[minIndex]);
    }
}

void Ordenacao::insertionSort(std::vector<int>& permutacao) {
    int n = permutacao.size();
    for (int i = 1; i < n; ++i) {
        int key = permutacao[i];
        int j = i - 1;

        while (j >= 0 && permutacao[j] > key) {
            permutacao[j + 1] = permutacao[j];
            --j;
        }

        permutacao[j + 1] = key;
    }
}

namespace {

void quicksortImpl(std::vector<int>& permutacao, int low, int high) {
    if (low < high) {
        int pivot = permutacao[high];
        int i = low - 1;

        for (int j = low; j < high; ++j) {
            if (permutacao[j] < pivot) {
                ++i;
                std::swap(permutacao[i], permutacao[j]);
            }
        }

        std::swap(permutacao[i + 1], permutacao[high]);
        int partitionIndex = i + 1;

        quicksortImpl(permutacao, low, partitionIndex - 1);
        quicksortImpl(permutacao, partitionIndex + 1, high);
    }
}

}

void Ordenacao::quicksort(std::vector<int>& permutacao) {
    int low = 0;
    int high = permutacao.size() - 1;
    quicksortImpl(permutacao, low, high);
}

namespace {

void merge(std::vector<int>& permutacao, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    std::vector<int> L(n1), R(n2);

    for (int i = 0; i < n1; ++i)
        L[i] = permutacao[l + i];
    for (int j = 0; j < n2; ++j)
        R[j] = permutacao[m + 1 + j];

    int i = 0;
    int j = 0;
    int k = l;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            permutacao[k] = L[i];
            ++i;
        } else {
            permutacao[k] = R[j];
            ++j;
        }
        ++k;
    }

    while (i < n1) {
        permutacao[k] = L[i];
        ++i;
        ++k;
    }

    while (j < n2) {
        permutacao[k] = R[j];
        ++j;
        ++k;
    }
}

void mergesortImpl(std::vector<int>& permutacao, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergesortImpl(permutacao, l, m);
        mergesortImpl(permutacao, m + 1, r);

        merge(permutacao, l, m, r);
    }
}

}

void Ordenacao::mergesort(std::vector<int>& permutacao) {
    int l = 0;
    int r = permutacao.size() - 1;
    mergesortImpl(permutacao, l, r);
}

namespace {

void heapify(std::vector<int>& permutacao, int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && permutacao[left] > permutacao[largest])
        largest = left;

    if (right < n && permutacao[right] > permutacao[largest])
        largest = right;

    if (largest != i) {
        std::swap(permutacao[i], permutacao[largest]);

        heapify(permutacao, n, largest);
    }
}

}

void Ordenacao::heapsort(std::vector<int>& permutacao) {
    int n = permutacao.size();

    for (int i = n / 2 - 1; i >= 0; --i)
        heapify(permutacao, n, i);

    for (int i = n - 1; i > 0; --i) {
        std::swap(permutacao[0], permutacao[i]);

        heapify(permutacao, i, 0);
    }
}

void Ordenacao::spiralSort(std::vector<int>& permutacao) {
    int n = permutacao.size();
    int left = 0, right = n - 1, top = 0, bottom = n - 1;
    int direction = 0;

    while (left <= right && top <= bottom) {
        if (direction == 0) { // Mover para a direita
            for (int i = left; i <= right; ++i) {
                if (i < right && permutacao[i] > permutacao[i + 1]) {
                    std::swap(permutacao[i], permutacao[i + 1]);
                }
            }
            top++;
            direction = 1;
        } else if (direction == 1) { // Mover para baixo
            for (int i = top; i <= bottom; ++i) {
                if (i < bottom && permutacao[i] > permutacao[i + 1]) {
                    std::swap(permutacao[i], permutacao[i + 1]);
                }
            }
            right--;
            direction = 2;
        } else if (direction == 2) { // Mover para a esquerda
            for (int i = right; i >= left; --i) {
                if (i > left && permutacao[i] < permutacao[i - 1]) {
                    std::swap(permutacao[i], permutacao[i - 1]);
                }
            }
            bottom--;
            direction = 3;
        } else if (direction == 3) { // Mover para cima
            for (int i = bottom; i >= top; --i) {
                if (i > top && permutacao[i] < permutacao[i - 1]) {
                    std::swap(permutacao[i], permutacao[i - 1]);
                }
            }
            left++;
            direction = 0;
        }
    }
}



